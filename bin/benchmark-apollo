#!/bin/bash
#
# This shell script automates running the mqtt-benchmark [1] against the
# Apache Apollo project [2].
#
# [1]: http://github.com/chirino/mqtt-benchmark
# [2]: http://activemq.apache.org/apollo
#

true \
${APOLLO_VERSION:=1.1-SNAPSHOT} \
${APOLLO_DOWNLOAD:="http://repository.apache.org/service/local/artifact/maven/redirect?r=snapshots&g=org.apache.activemq&a=apache-apollo&v=${APOLLO_VERSION}&e=tar.gz&c=unix-distro"} \
${MQTT_PLUIGN_VERSION:=99-master-SNAPSHOT} \
${MQTT_PLUIGN_DOWNLOAD:="http://repo.fusesource.com/nexus/service/local/artifact/maven/redirect?r=snapshots&g=org.fusesource.fabric.apollo&a=fabric-apollo-mqtt&v=${MQTT_PLUIGN_VERSION}"} \
${MQTT_CLIENT_VERSION:=1.0-SNAPSHOT} \
${MQTT_CLIENT_DOWNLOAD:="http://repo.fusesource.com/nexus/service/local/artifact/maven/redirect?r=snapshots&g=org.fusesource.mqtt-client&a=mqtt-client&v=${MQTT_CLIENT_VERSION}"} 
# ${APOLLO_DOWNLOAD:="https://repository.apache.org/content/repositories/orgapacheactivemq-162/org/apache/activemq/apache-apollo/${APOLLO_VERSION}/apache-apollo-${APOLLO_VERSION}-unix-distro.tar.gz"}
# ${APOLLO_DOWNLOAD:="http://archive.apache.org/dist/activemq/activemq-apollo/${APOLLO_VERSION}/apache-apollo-${APOLLO_VERSION}-unix-distro.tar.gz"}


BASEDIR=`dirname "$0"`/.. ; cd "${BASEDIR}" ; BASEDIR=`pwd` ; cd - > /dev/null
. ${BASEDIR}/bin/benchmark-setup

#
# Install the apollo distro
#
APOLLO_HOME="${WORKSPACE}/apache-apollo-${APOLLO_VERSION}"
if [ ! -d "${APOLLO_HOME}" ]; then
  cd ${WORKSPACE}
  wget "$APOLLO_DOWNLOAD" -O apache-apollo-${APOLLO_VERSION}.tar.gz
  tar -zxvf apache-apollo-${APOLLO_VERSION}.tar.gz
  rm -rf apache-apollo-${APOLLO_VERSION}.tar.gz
fi

if [ ! -f "${APOLLO_HOME}/lib/fabric-apollo-mqtt-${MQTT_PLUIGN_VERSION}.jar" ]; then
  wget "$MQTT_PLUIGN_DOWNLOAD" -O "${APOLLO_HOME}/lib/fabric-apollo-mqtt-${MQTT_PLUIGN_VERSION}.jar"
fi
if [ ! -f "${APOLLO_HOME}/lib/mqtt-client-${MQTT_CLIENT_VERSION}.jar" ]; then
  wget "$MQTT_CLIENT_DOWNLOAD" -O "${APOLLO_HOME}/lib/mqtt-client-${MQTT_CLIENT_VERSION}.jar"
fi


APOLLO_BASE="${WORKSPACE}/apollo-${APOLLO_VERSION}"
if [ ! -d "${APOLLO_BASE}" ]; then
  cd "${WORKSPACE}"
  "${APOLLO_HOME}/bin/apollo" create --with-ssl=false "apollo-${APOLLO_VERSION}"
  perl -pi -e 's|<leveldb_store directory="\${apollo.base}/data"/>|<leveldb_store directory="\${apollo.base}/data" log_size="2G"/>|' "${WORKSPACE}/apollo-${APOLLO_VERSION}/etc/apollo.xml"
fi

#
# Cleanup preious executions.
killall -9 java erl epmd apollo > /dev/null 2>&1
rm -rf ${APOLLO_BASE}/data/* ${APOLLO_BASE}/tmp/* ${APOLLO_BASE}/log/*

#
# Configuration
export APOLLO_ASSERTIONS="false"
export JVM_FLAGS="-server -Xmx4G -Xms1G"

#
# Start the server
CONSOLE_LOG="${REPORTS_HOME}/apollo-${APOLLO_VERSION}.log"
"${APOLLO_BASE}/bin/apollo-broker" run > "${CONSOLE_LOG}" 2>&1 &
APOLLO_PID=$!
echo "Started Apollo with PID: ${APOLLO_PID}"
sleep 5
cat "${CONSOLE_LOG}"

#
# Run the benchmark
cd ${BASEDIR}
"${WORKSPACE}/bin/sbt" run --user admin --password password "${REPORTS_HOME}/apollo-${APOLLO_VERSION}.json"

#
# Kill the server
kill -9 ${APOLLO_PID}

# Create a report.
"${BASEDIR}/bin/benchmark-report" $*
